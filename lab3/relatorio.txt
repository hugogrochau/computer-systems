Sistemas de Computação - Laboratório 3 - Hugo Grochau - 1310486


1) Execute o programa “ctrl-c.c”.
Digite Ctrl-C e Ctrl-\. Analise o resultado.
Neste mesmo programa, remova os comandos signal( ) e repita o teste anterior
observando os resultados.

======== PROGRAMA ========
#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#define EVER ;;

void intHandler(int sinal);
void quitHandler(int sinal);

int main (void)
{
	void (*p)(int); // ponteiro para função que recebe int como parâmetro
	p = signal(SIGINT, intHandler);
	printf("Endereco do manipulador anterior %p\n", p);
	p = signal(SIGQUIT, quitHandler);
	printf("Endereco do manipulador anterior %p\n", p);
	puts ("Ctrl-C desabilitado. Use Ctrl-\\ para terminar");
	for(EVER);
}

void intHandler(int sinal)
{
	printf("Você pressionou Ctrl-C (%d)\n", sinal);
}


void quitHandler(int sinal)
{
	puts ("Terminando o processo...\n");
	exit (0);
}

======== OUTPUT ========
Endereco do manipulador anterior (nil)
Endereco do manipulador anterior (nil)
Ctrl-C desabilitado. Use Ctrl-\ para terminar
^CVocê pressionou Ctrl-C (2)
^\Terminando o processo...

======== CONCLUSÃO ========
O programa ctrl-c ignora o SIGINT, logo ele não termina quando ctrl+c é apertado. Ele só termina com ctrl+\ pois o SIGQUIT é tratado de forma que termina o processo.


2) Tente fazer um programa para interceptar o sinal SIGKILL. Você conseguiu? Explique.
======== PROGRAMA ========
#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#define EVER ;;

void killHandler(int sinal);

int main (void)
{
	void (*p)(int); // ponteiro para função que recebe int como parâmetro

	p = signal(SIGKILL, killHandler);
	printf("Endereco do handler de SIGKILL %p\n", p);
	for(EVER);
}

void killHandler(int sinal)
{
	puts("SIGKILL desabilitado");
}

======== OUTPUT ========
[c1310486@madeira lab3]$ ./sigkill &
[1] 3447
[c1310486@madeira lab3]$ Endereco do handler de SIGKILL 0xffffffffffffffff
[c1310486@madeira lab3]$ ps
  PID TTY          TIME CMD
 2497 pts/0    00:00:00 csh
 3447 pts/0    00:00:01 sigkill
 3448 pts/0    00:00:00 ps
[c1310486@madeira lab3]$ kill -KILL 3447
[c1310486@madeira lab3]$ ps
  PID TTY          TIME CMD
 2497 pts/0    00:00:00 csh
 3452 pts/0    00:00:00 ps
[1]  + Killed                        ./sigkill

======== CONCLUSÃO ========
Não consegui interceptar o signal SIGKILL. O sistema operacional não permite que o SIGKILL seja ignorado.


3) Execute e explique o funcionamento de filhocidio.c
======== PROGRAMA ========
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <wait.h>

#define EVER ;;

void childhandler(int signo);

int delay;
int main (int argc, char *argv[])
{
	pid_t pid;
	signal(SIGCHLD, childhandler);
	if ((pid = fork()) < 0)
	{
		fprintf(stderr, "Erro ao criar filho\n");
		exit(-1);
	}
	if (pid == 0) /* child */
		for(EVER); /* ou sleep(3);*/
	else /* parent */
	{
		sscanf(argv[1], "%d", &delay); /* read delay from command line */
		sleep(delay);
		printf("Program %s exceeded limit of %d seconds!\n", argv[2], delay);
		kill(pid, SIGKILL);
	}
	return 0;
}

void childhandler(int signo) /* Executed if child dies before parent */
{
	int status;
	pid_t pid = wait(&status);
	printf("Child %d terminated within %d seconds com estado %d.\n", pid, delay, status);
	exit(0);
}

======== OUTPUT ========
[c1310486@madeira lab3]$ ./filhocidio 3 filhocidio
Program filhocidio exceeded limit of 3 seconds!
[c1310486@madeira lab3]$ ./filhocidio 10 filhocidio &
[1] 3502
[c1310486@madeira lab3]$ ps
  PID TTY          TIME CMD
 2497 pts/0    00:00:00 csh
 3502 pts/0    00:00:00 filhocidio
 3503 pts/0    00:00:01 filhocidio
 3504 pts/0    00:00:00 ps
[c1310486@madeira lab3]$ kill -KILL 3503
[c1310486@madeira lab3]$ Child 3503 terminated within 10 seconds com estado 9.

======== CONCLUSÃO ========
O programa filhocidio cria um novo processo através de um fork, e espera n segundos para matar ele. Caso o filho seja morto antes desse tempo, um handler é excutado para tratar o SIGCHLD, quando um processo filho é morto antes do pai.